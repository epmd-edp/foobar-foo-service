# Copyright 2018 EPAM Systems.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Template
metadata:
  name: "foo-service"
  annotations:
    iconClass: "icon-spring"
    description: Openshift template for spring-boot application/service deploying
    template.openshift.io/provider-display-name: EPAM
    template.openshift.io/support-url: https://www.epam.com
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: "foo-service"
    labels:
      app: "foo-service"
  spec:
    ports:
    - name: "foo-service"
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: "foo-service"
    type: ClusterIP
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "foo-service"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "foo-service-db"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "1Gi"
    storageClassName: gp2
- apiVersion: v1
  kind: Service
  metadata:
    name: "foo-service-db"
    labels:
      app: "foo-service-db"
  spec:
    ports:
    - name: "foo-service-db"
      port: 5432
    selector:
      app: "foo-service-db"
    type: ClusterIP
    sessionAffinity: None
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: "foo-service"
    name: "foo-service-db"
  spec:
    replicas: 1
    selector:
      app: "foo-service-db"
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: "foo-service-db"
      spec:
        containers:
        - name: "foo-service-db"
          env:
          - name: POSTGRES_DB
            value: "foo-service-db"
          - name: POSTGRES_USER
            value: "admin"
          - name: POSTGRES_PASSWORD
            value: "admin"
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          - name: POD_IP
            valueFrom: { fieldRef: { fieldPath: status.podIP } }
          image: "postgres:9.6"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "1Gi"
          ports:
            - containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready --host $POD_IP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - exec pg_isready --host $POD_IP
            initialDelaySeconds: 60
            timeoutSeconds: 3
            periodSeconds: 5
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: "foo-service-db"
        serviceAccount: "foo-service"
        volumes:
          - name: "foo-service-db"
            persistentVolumeClaim:
              claimName: "foo-service-db"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "foo-service"
    labels:
      app: "foo-service"
  spec:
    replicas: 1
    selector:
      app: "foo-service"
    strategy:
      activeDeadlineSeconds: 21600
      type: Rolling
      rollingParams:
        failurePolicy: Abort
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: "foo-service"
      spec:
        initContainers:
        - name: "init-foo-service-db"
          image: busybox
          command: ["sh", "-c", "while ! nc -w 1 'foo-service'-db 5432 </dev/null; do echo waiting for 'foo-service'-db; sleep 10; done;"]
        serviceAccountName: "foo-service"
        containers:
        - name: "foo-service"
          image: "docker-registry.default.svc:5000/${IMAGE_NAME}:${APP_VERSION}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 5
          resources:
            requests:
              memory: 1Gi
          env:
          - name: JAVA_OPTIONS
            value: >
              -Dspring.profiles.active=prod
              -Dspring.config.location=/etc/config/mount-config.properties
              -Dspring.cloud.kubernetes.secrets.paths=/etc/secrets
          - name: POSTGRES_DATABASE
            value: "foo-service-db"
          - name: POSTGRES_USER
            value: "admin"
          - name: POSTGRES_PASSWORD
            value: "admin"
          volumeMounts:
          - name: foo-mount
            mountPath: "/etc/config"
            readOnly: true
          - name: foo-secret
            mountPath: "/etc/secrets/foo"
            readOnly: true
          - name: rabbitmq-secret
            mountPath: "/etc/secrets/rabbitmq"
            readOnly: true
        volumes:
        - name: foo-mount
          configMap:
            name: foo-mount
            items:
              - key: mount-config
                path: mount-config.properties
        - name: foo-secret
          secret:
            secretName: foo-secret
        - name: rabbitmq-secret
          secret:
            secretName: rabbitmq-secret
            items:
              - key: rabbitmq.username
                path: spring.rabbitmq.username
              - key: rabbitmq.password
                path: spring.rabbitmq.password
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
      - type: ConfigChange
parameters:
- displayName: Application image name
  name: IMAGE_NAME
  required: true
  value: "foo-service"
- displayName: Application version
  name: APP_VERSION
  required: true
  value: "latest"
- displayName: Current namespace
  name: NAMESPACE
  required: true